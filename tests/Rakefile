require 'yaml'

# tests run at the garuda/ root
Dir.chdir(File.dirname(__FILE__))
Dir.chdir('..')
@root = Dir.pwd

# If you're going to run individual tasks, make sure to run `rake cleanup` after
task :default => [:test_all_gito]

task :test_all_simple => [
  :test_simple_install,
  :test_simple_install_garuda_hook,
  :test_post_receive_hook,
  :cleanup
]

task :test_all_gito => [
  :test_gito_install,
  :test_gito_install_garuda_hook,
  :test_post_receive_hook_gito,
  :cleanup
]

task :test_garuda => [
  :test_languages, 
  :test_garuda,
  :test_run_script
]


# "Local" tests

desc 'Tests local stuff not involving installation'
task :test_languages do
  ruby 'tests/languages_test.rb'
  Rake::Task["create_repo"].execute
  ruby 'tests/garuda_test.rb'
  ruby 'tests/run_test.rb'
  Rake::Task["remove_repo"].execute
end



desc 'Runs the simple Installation tests'
task :test_simple do
  # create test environment
  `mkdir tests/tmp/server; cd tests/tmp/server
  mkdir test.git; cd test.git; git --bare init
  cd ..; mkdir garuda.git; cd garuda.git; git --bare init
  cd ../..; mkdir local; cd local; git clone ../server/test.git`
  Dir.chdir(@root)
  
  # install garuda
  Dir.chdir('tests/tmp/server')
  load "#@root/.install/simple.rb"
  Dir.chdir @root
  
  # clone to remote/garuda, commit to remote/garuda
  `cd tests/tmp/local; git clone ../server/garuda
  cd garuda; touch foo; git add .; git commit -m 'nothing'; git push origin master`
  Dir.chdir @root
  
  # push to remote/test.git
  `cd tests/tmp/local/test; touch foo; git add .; git commit -m 'nothing'; git push origin master`
  Dir.chdir @root
  
  ruby 'tests/simple_install_test.rb'
  ruby 'tests/simple_install_garuda_hook_test.rb'
  ruby 'tests/post_receive_hook_test.rb'
  
  Rake::Task['cleanup'].execute
end




# Gitolite / Gitosis tests
desc 'Gito Install: Tests for successfull installation'
task :test_gito_install => [:install_garuda_gito] do |t|
  ruby  'tests/gito_install_test.rb'
end

desc "Gito Install: Tests if the remote/test hook was installed"
task :test_gito_install_garuda_hook => [:push_to_garuda_gito] do |t|
  ruby  'tests/gito_install_garuda_hook_test.rb'
end

desc "Tests if `remote/test.git/hooks/post-receive` ran succesfully"
task :test_post_receive_hook_gito => [:push_to_test] do |t|
  ruby 'tests/post_receive_hook_test.rb'
end

desc "Pushes `local/test` => `remote/test.git`"
task :push_to_test => [:push_to_garuda] do |t|
  
end



# Gitolite / Gitosis install tasks

desc "Gito Installation: Tests for successful installation"
task :install_garuda_gito => [:create_install_env] do |t|
  Dir.chdir('tests/tmp/server')
  load "#@root/.install/gito.rb"
  Dir.chdir @root
end

desc "Gito Installation: Pushes `local/garuda` => `remote/garuda.git`"
task :push_to_garuda_gito => [:install_garuda_gito] do |t|
  `cd tests/tmp/local; git clone ../server/garuda.git
  cd garuda; touch foo; git add .; git commit -m 'nothing'; git push origin master`
  Dir.chdir @root
end

desc "Pushes `local/test` => `remote/test.git`"
task :push_to_test_gito => [:push_to_garuda] do |t|
  `cd tests/tmp/local/test; touch foo; git add .; git commit -m 'nothing'; git push origin master`
  Dir.chdir @root
end





# shared install tests

desc 'cleans up the mess'
task :cleanup do
  Rake::Task["remove_repo"].execute
  `rm -rf tmp/*`
  `rm -rf tests/tmp/*`
end







# "local" test scripts

desc "Creates an empty repository for this garuda instance to test against"
task :create_repo do
  Dir.chdir('..')
  `mkdir test.git; cd test.git; git --bare init
  cd ..; git clone test.git; cd test 
  echo 'test' > testfile; git add testfile; git commit -m 'testing'; git push origin master;`
  Dir.chdir(@root)
end

desc "Removes it"
task :remove_repo do
  Dir.chdir('..')
  `rm -rf test; rm -rf test.git`
  Dir.chdir(@root)
end




# Old stuffz
task :create_destination do
  `mkdir test_destination`
end

task :remove_destination do
  `rm -rf test_destination`
end

task :test_git_extractor do
  Rake::Task["create_repo"].execute
  ruby "tests/git_extractor_test.rb"
  Rake::Task["remove_repo"].execute
end

task :test_rsync do
  Rake::Task["create_repo"].execute
  Rake::Task["create_repo"].execute
  ruby 'tests/rsync_test.rb'
  Rake::Task["remove_repo"].execute
  Rake::Task["remove_destination"].execute
end

task :test_multi_ftp do
  Rake::Task["create_repo"].execute
  ruby 'tests/multi_ftp_test.rb'
  Rake::Task["remove_repo"].execute
end


