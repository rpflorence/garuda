require 'yaml'

# tests run at the garuda/ root
Dir.chdir(File.dirname(__FILE__))
Dir.chdir('..')
@root = Dir.pwd

task :default => [:testall]
task :testall => [
  :test_languages,
  :test_garuda,
  :test_run_script,
  :test_simple,
  :test_gito
]


# Tests
# -----------------------------------------------------------------------

desc 'Test the Garuda Class'
task :test_garuda do
  Rake::Task["create_repo"].execute
  ruby 'tests/garuda_test.rb'
  Rake::Task["remove_repo"].execute
end

desc 'Tests the `run` script'
task :test_run_script do
  Rake::Task["create_repo"].execute
  ruby 'tests/run_test.rb'
  Rake::Task["remove_repo"].execute
end

desc 'Tests if environment can run ruby, python, and node'
task :test_languages do
  ruby 'tests/languages_test.rb'
end

desc 'Runs the simple Installation tests'
task :test_simple => :simple_env do
  ruby 'tests/simple_install_test.rb'
  Rake::Task['cleanup'].execute
end

desc 'Runs the gitolite / gitosis installation tests'
task :test_gito => :gito_env do
  ruby 'tests/gito_install_test.rb'
  Rake::Task['cleanup'].execute
end

# Quick testing environments
# -----------------------------------------------------------------------

desc 'Simple: Install garuda into a simple test environment'
task :simple_env do
  # create test environment
  `mkdir tests/tmp/server; cd tests/tmp/server
  mkdir test.git; cd test.git; git --bare init
  cd ..; mkdir garuda.git; cd garuda.git; git --bare init
  cd ../..; mkdir local; cd local; git clone ../server/test.git`
  Dir.chdir(@root)
  
  # install garuda
  Dir.chdir('tests/tmp/server')
  load "#@root/.install/simple.rb"
  Dir.chdir @root
  
  # clone to remote/garuda, commit to remote/garuda
  `cd tests/tmp/local; git clone ../server/garuda
  cd garuda; touch foo; git add .; git commit -m 'nothing'; git push origin master`
  Dir.chdir @root
  
  # push to remote/test.git
  `cd tests/tmp/local/test; touch foo; git add .; git commit -m 'nothing'; git push origin master`
end

desc 'Gito: Install Garuda into a gitolite / gitosis environment'
task :gito_env do
  # create test environment
  `mkdir tests/tmp/server; cd tests/tmp/server
  mkdir test.git; cd test.git; git --bare init
  cd ..; mkdir garuda.git; cd garuda.git; git --bare init
  cd ../..; mkdir local; cd local; git clone ../server/test.git`
  Dir.chdir(@root)
  
  # install garuda
  Dir.chdir('tests/tmp/server')
  load "#@root/.install/gito.rb"
  Dir.chdir @root
  
  # clone to remote/garuda, commit to remote/garuda
  `cd tests/tmp/local; git clone ../server/garuda.git
  cd garuda; touch foo; git add .; git commit -m 'nothing'; git push origin master`
  Dir.chdir @root
  
  # push to remote/test.git
  `cd tests/tmp/local/test; touch foo; git add .; git commit -m 'nothing'; git push origin master`
  Dir.chdir @root
end


desc 'cleans up the mess'
task :cleanup do
  Rake::Task["remove_repo"].execute
  `rm -rf tmp/*`
  `rm -rf tests/tmp/*`
end




# "local" test tasks
# -----------------------------------------------------------------------
desc "Creates an empty repository for this garuda instance to test against"
task :create_repo do
  Dir.chdir('..')
  `mkdir test.git; cd test.git; git --bare init
  cd ..; git clone test.git; cd test 
  echo 'test' > testfile; git add testfile; git commit -m 'testing'; git push origin master;`
  Dir.chdir(@root)
end

desc "Removes it"
task :remove_repo do
  Dir.chdir('..')
  `rm -rf test; rm -rf test.git`
  Dir.chdir(@root)
end




# Old stuffz
# -----------------------------------------------------------------------
task :create_destination do
  `mkdir test_destination`
end

task :remove_destination do
  `rm -rf test_destination`
end

task :test_git_extractor do
  Rake::Task["create_repo"].execute
  ruby "tests/git_extractor_test.rb"
  Rake::Task["remove_repo"].execute
end

task :test_rsync do
  Rake::Task["create_repo"].execute
  Rake::Task["create_repo"].execute
  ruby 'tests/rsync_test.rb'
  Rake::Task["remove_repo"].execute
  Rake::Task["remove_destination"].execute
end

task :test_multi_ftp do
  Rake::Task["create_repo"].execute
  ruby 'tests/multi_ftp_test.rb'
  Rake::Task["remove_repo"].execute
end


